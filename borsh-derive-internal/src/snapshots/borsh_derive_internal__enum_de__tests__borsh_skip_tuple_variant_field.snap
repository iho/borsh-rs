---
source: borsh-derive-internal/src/enum_de.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
impl borsh::de::BorshDeserialize for AAT
where
    u32: borsh::BorshDeserialize,
    u8: borsh::BorshDeserialize,
{
    fn deserialize_reader<R: borsh::__private::maybestd::io::Read>(
        reader: &mut R,
    ) -> ::core::result::Result<Self, borsh::__private::maybestd::io::Error> {
        let tag = <u8 as borsh::de::BorshDeserialize>::deserialize_reader(reader)?;
        <Self as borsh::de::EnumExt>::deserialize_variant(reader, tag)
    }
}
impl borsh::de::EnumExt for AAT
where
    u32: borsh::BorshDeserialize,
    u8: borsh::BorshDeserialize,
{
    fn deserialize_variant<R: borsh::__private::maybestd::io::Read>(
        reader: &mut R,
        variant_idx: u8,
    ) -> ::core::result::Result<Self, borsh::__private::maybestd::io::Error> {
        let mut return_value = match variant_idx {
            0u8 => {
                AAT::B(
                    Default::default(),
                    borsh::BorshDeserialize::deserialize_reader(reader)?,
                )
            }
            1u8 => {
                AAT::NegatedVariant {
                    beta: borsh::BorshDeserialize::deserialize_reader(reader)?,
                }
            }
            _ => {
                return Err(
                    borsh::__private::maybestd::io::Error::new(
                        borsh::__private::maybestd::io::ErrorKind::InvalidInput,
                        borsh::__private::maybestd::format!(
                            "Unexpected variant index: {:?}", variant_idx
                        ),
                    ),
                );
            }
        };
        Ok(return_value)
    }
}

